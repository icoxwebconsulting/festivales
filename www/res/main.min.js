var app = angular.module('lesarts',
    [
        'ionic',
        'ngCordova',
        'ngCordovaOauth',
        'angular.filter',
        'ngStorage',
        'ngResource',
        'ngTwitter',
        'spotify',
        'ionic-zoom-view'
    ]);

app.run(function ($rootScope, $state, $stateParams, $ionicPlatform, $ionicHistory, $state, UserService, NotificationService) {
    $ionicPlatform.ready(function () {
        //DBService.init();
        // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard
        // for form inputs)
        if (window.cordova && window.cordova.plugins.Keyboard) {
            cordova.plugins.Keyboard.disableScroll(true);
        }
        if (window.StatusBar) {
            // org.apache.cordova.statusbar required
            StatusBar.styleDefault();
        }
        
        $ionicPlatform.registerBackButtonAction(function (event) {
            //if( ($state.current.name=="base.login" || $state.current.name=="base.register") && (UserService.isLogged()) ){
            //    event.preventDefault();
            //    navigator.app.exitApp();
            //}
            if($state.current.name=="base.login" || $state.current.name=="base.register" || $state.current.name=="menu.artist-discover") {
                event.preventDefault();
                navigator.app.exitApp();
            }
            else {
                event.preventDefault();
                switch($ionicHistory.currentView().stateId) {
                    case "menu.artist-list":
                        $ionicHistory.clearHistory();
                        $state.go('menu.artist-discover');
                        break;
                    case "menu.poster":
                        $ionicHistory.clearHistory();
                        $state.go('menu.artist-discover');
                        break;
                    case "menu.schedule":
                        $ionicHistory.clearHistory();
                        $state.go('menu.artist-discover');
                        break;
                    case "menu.map":
                        $ionicHistory.clearHistory();
                        $state.go('menu.artist-discover');
                        break;
                    case "menu.ticket":
                        $ionicHistory.clearHistory();
                        $state.go('menu.artist-discover');
                        break;
                    case "menu.coolway":
                        $ionicHistory.clearHistory();
                        $state.go('menu.artist-discover');
                        break;
                    case "menu.info":
                        $ionicHistory.clearHistory();
                        $state.go('menu.artist-discover');
                        break;
                    case "menu.social":
                        $ionicHistory.clearHistory();
                        $state.go('menu.artist-discover');
                        break;
                    default:
                        $ionicHistory.goBack();
                }


                //navigator.app.backHistory();
            }
        }, 100);


        if (!UserService.isLogged()) {
            $state.go('base.login');
            console.info('redirect login');
        }else{
            UserService.registerNotifications();
        }
        
        $rootScope.$on("$stateChangeStart", function(event, toState, toParams, fromState, fromParams) {
            if( (toState.name == "base.login" || toState.name == "base.register"   ) && (UserService.isLogged()) )
            {
                event.preventDefault();
                navigator.app.exitApp();
            }
        });

    });
});

app.config(function($stateProvider, $urlRouterProvider, $ionicConfigProvider) {
    $ionicConfigProvider.backButton.text('').icon('my-back-button');

    $stateProvider
        .state('base', {
            url: '/',
            abstract: true,
            templateUrl: 'templates/base.html',
            controller: 'BaseController'
        })
        .state('base.login', {
            url: 'login',
            views: {
                'content': {
                    templateUrl: 'templates/user/sign_in.html',
                    controller: 'LoginController',
                    resolve: {
                        data: function ($ionicPlatform, UserService, $state) {
                            $ionicPlatform.ready(function() {
                                if (UserService.isLogged()) {
                                    $state.go('menu.artist-discover');
                                    console.info('is logged');
                                } else
                                    console.info('is not logged');
                            });
                        }
                    }
                }
            }
        })
        .state('base.register', {
            url: 'register',
            views: {
                'content': {
                    templateUrl: 'templates/user/sign_up.html',
                    controller: 'RegisterController',
                    resolve: {
                        data: function ($ionicPlatform, UserService, $state) {
                            $ionicPlatform.ready(function() {
                                if (UserService.isLogged()) {
                                    $state.go('menu.artist-discover');
                                    console.info('is logged');
                                } else
                                    console.info('is not logged');
                            });
                        }
                    }
                }
            }
        })
        .state('base.recover', {
            url: 'recover',
            views: {
                'content': {
                    templateUrl: 'templates/user/recover_password.html',
                    controller: 'RecoverController',
                    resolve: {
                        data: function ($ionicPlatform, UserService, $state) {
                            $ionicPlatform.ready(function() {
                                if (UserService.isLogged()) {
                                    $state.go('menu.artist-discover');
                                    console.info('is logged');
                                } else
                                    console.info('is not logged');
                            });
                        }
                    }
                }
            }
        })
        .state('menu', {
            url: '/app/',
            abstract: true,
            templateUrl: 'templates/menu/main.html',
            controller: 'MenuController'
        })
        .state('menu.artist-discover', {
            url: 'artists/discover',
            views: {
                'content': {
                    templateUrl: 'templates/artist/main.html',
                    controller: 'ArtistController'
                }
            }
        })
        .state('menu.artist-list', {
            url: 'artists',
            views: {
                'content': {
                    templateUrl: 'templates/artist/list.html',
                    controller: 'ArtistController'
                }
            }
        })
        .state('menu.artist-detail', {
            url: 'artist/:id',
            views: {
                'content': {
                    templateUrl: 'templates/artist/detail.html',
                    controller: 'ArtistController'
                }
            }
        })
        .state('menu.poster', {
            url: 'poster',
            views: {
                'content': {
                    templateUrl: 'templates/poster/main.html',
                    controller: 'PosterController'
                }
            }
        })
        .state('menu.schedule', {
            url: 'schedule',
            views: {
                'content': {
                    templateUrl: 'templates/schedule/main.html',
                    controller: 'ScheduleController'
                }
            }
        })
        .state('menu.map', {
            url: 'map',
            views: {
                'content': {
                    templateUrl: 'templates/map/main.html',
                    controller: 'MapController'
                }
            }
        })
        .state('menu.ticket', {
            url: 'ticket',
            views: {
                'content': {
                    templateUrl: 'templates/ticket/main.html',
                    controller: 'TicketController'
                }
            }
        })
        .state('menu.coolway', {
            url: 'coolway',
            views: {
                'content': {
                    templateUrl: 'templates/coolway/main.html',
                    controller: 'CoolwayController'
                }
            }
        })
        .state('menu.streaming', {
            url: 'streaming',
            views: {
                'content': {
                    templateUrl: 'templates/streaming/main.html',
                    controller: 'StreamingController'
                }
            }
        })
        .state('menu.info', {
            url: 'info',
            views: {
                'content': {
                    templateUrl: 'templates/info/main.html',
                    controller: 'InfoController'
                }
            }
        })
        .state('menu.map-how-get', {
            url: 'map-how-get',
            views: {
                'content': {
                    templateUrl: 'templates/info/map.html',
                    controller: 'MapHowGetController'
                }
            }
        })
        .state('menu.sponsor', {
            url: 'sponsor',
            views: {
                'content': {
                    templateUrl: 'templates/info/sponsor.html'
                }
            }
        })
        .state('menu.weather', {
            url: 'weather',
            views: {
                'content': {
                    templateUrl: 'templates/info/weather.html'
                }
            }
        })
        .state('menu.social', {
            url: 'social',
            views: {
                'content': {
                    templateUrl: 'templates/social/main.html',
                    controller: 'SocialController'
                }
            }
        });

    // if none of the above states are matched, use this as the fallback
    $urlRouterProvider.otherwise('/app/artists/discover');
    $ionicConfigProvider.views.maxCache(0);
});
app.constant('DB_CONFIG', {
    name: 'DB',
    tables: [
        {
            name: 'artists',
            erasable: true,
            columns: [
                {name: 'id', type: 'integer'},
                {name: 'name', type: 'text'},
                {name: 'description', type: 'text'},
                {name: 'image_profile', type: 'text'},
                {name: 'image_cover', type: 'text'},
                {name: 'stage_id', type: 'text'},
                {name: 'stage_name', type: 'text'},
                {name: 'schedule', type: 'text'},
                {name: 'spotify_id', type: 'text'},
                {name: 'facebook', type: 'text'},
                {name: 'twitter', type: 'text'},
                {name: 'instagram', type: 'text'}
            ]
        },
        {
            name: 'favorites',
            erasable: false,
            columns: [
                {name: 'artist_id', type: 'integer'},
                {name: 'user_id', type: 'integer'}
            ]
        },
        {
            name: 'posters',
            erasable: true,
            columns: [
                {name: 'id', type: 'integer'},
                {name: 'image', type: 'text'}
            ]
        },
        {
            name: 'maps',
            erasable: true,
            columns: [
                {name: 'id', type: 'integer PRIMARY KEY AUTOINCREMENT'},
                {name: 'name', type: 'text'},
                {name: 'image', type: 'text'},
                {name: 'latitude', type: 'text'},
                {name: 'longitude', type: 'text'}
            ]
        },
        {
            name: 'locations',
            erasable: true,
            columns: [
                {name: 'id', type: 'integer PRIMARY KEY AUTOINCREMENT'},
                {name: 'name', type: 'text'},
                {name: 'detail', type: 'text'},
                {name: 'image', type: 'text'},
                {name: 'latitude', type: 'text'},
                {name: 'longitude', type: 'text'}
            ]
        }
    ]
});
app.constant('GLOBAL', {
    'api':{
        'url' : 'http://gravedadprod.mobi/app_dev.php/api/',
        //'url': 'http://coolway.dev/app_dev.php/api/',
        //'url' : 'http://festivales.icox.mobi/app_dev.php/api/',
        'version': 'v1',
        'feast': 1
    },
    'server':{
        'image': 'http://gravedadprod.mobi/uploads/'
        //'image': 'http://coolway.dev/uploads/'
        //'image': 'http://festivales.icox.mobi/uploads/'
    },
    'spotify':{
        'country_iso': 'ES',
        'user_id': 'festivaldelesarts',
        'client_id': '77b0545674984c768ed449759d5911c8',
        'playlist_id': '4wGfReMLNIEHqJ3dySeKnQ'
    },
    'facebook':{
        'api_version': 'v2.5',
        'user_id': '850431581647988',
        'client_id': '1706543149628857',
        'client_secret': '99a5617adda2ef35f914ab9f01dbc626'
    },
    'instagram':{
        'user_id': '1545629618',
        'client_id': '642176ece1e7445e99244cec26f4de1f'
    }
});
app.controller('accountCtrl', function ($scope, $state) {
    $scope.state = $state;
});
app.controller('ArtistController', function ($rootScope, $scope,DBService,  $state, $filter, $ionicPopup, $ionicScrollDelegate, filterFilter, $anchorScroll, ArtistService, SpotifyService, ScheduleService, GLOBAL, $ionicActionSheet, $ionicLoading, $stateParams, $cordovaSocialSharing, MusicService, VersionService, $localStorage) {
a//pp.controller('ArtistController', function ($rootScope, $scope, $state, $filter, $ionicPopup, $ionicScrollDelegate, filterFilter, $anchorScroll, ArtistService, SpotifyService, ScheduleService, GLOBAL, $ionicActionSheet, $ionicLoading, $stateParams, $cordovaSocialSharing, MusicService, VersionService, $localStorage) {

    $scope.init = function () {
        $scope.view = {};
        $scope.view.ready = false;
        $scope.view.server_image = GLOBAL.server.image;
        $scope.view.feast_id = GLOBAL.api.feast;
        $scope.audio = new Audio();
        $scope.pause = true;

        $scope.view.currentDate = $filter('date')(new Date(), 'yyyy-MM-dd');
        $scope.view.feastDate =  $filter('date')(new Date('2016-06-10'), 'yyyy-MM-dd');

        $scope.view.scheduleActive = false;

        ScheduleService.resource.getAll().$promise.then(function(response){
            $scope.view.scheduleActive = response.data.status;
        });
    };

    $scope.init();


    $scope.showDetail = function(id){
        if(id > 0)
            $state.go('menu.artist-detail', {'id': id});
        else
            return false;
    };

    self.getArtists = function(sort){
        // Get all the artists
        ArtistService.getAll().then(function(artists){

            if(artists.length > 0)
            {
               // console.info('database', artists);
                $scope.view.artists = artists;
                if(sort === true)
                    self.sort();

                $scope.view.ready = true;
                $scope.$emit('artist:ready', true);
            }
            else{
                // Setup the loader
                $ionicLoading.show({
                    content: 'Cargando',
                    animation: 'fade-in',
                    showBackdrop: true,
                    maxWidth: 200,
                    showDelay: 0
                });
                ArtistService.resource.getAll().$promise.then(function(artists){
                  //  console.info('api', artists);
                    $scope.view.artists = artists.data;
                    if(sort === true)
                        self.sort();

                    angular.forEach(artists.data, function (value, key) {
                        ArtistService.add(value);
                    });
                    $ionicLoading.hide();
                    $scope.view.ready = true;
                    $scope.$emit('artist:ready', true);
                },function(error) {
                   // console.info('error', error);
                    $ionicLoading.hide();
                    $scope.view.ready = true;
                });
            }

        });
    };


    self.sort = function(){
        var currentCharCode = ' '.charCodeAt(0) - 1;

        $scope.view.artists
            .sort(function(a, b) {
                return a.name > b.name ? 1 : -1;
            })
            .forEach(function(artist) {
                //Get the first letter of the last name, and if the last name changes
                //put the letter in the array
                var artistCharCode = artist.name.toUpperCase().charCodeAt(0);
                if (artistCharCode < 65 ){
                    artistCharCode = 35;
                }

                //if (artistCharCode > 90) {
                //    artistCharCode = 35;
                //}

                var difference = artistCharCode - currentCharCode;

                //console.info('difference', difference, ' artist ', artist.name, ' artistCharCode ',artistCharCode);

                for (var i = 1; i <= difference; i++) {
                    //console.info('entra: ',artist.name, ' currentCharCode: ',currentCharCode );
                    addLetter(currentCharCode + i);
                }
                currentCharCode = artistCharCode;
                artists.push(artist);
            });

        //If names ended before Z, add everything up to Z
        for (var i = currentCharCode + 1; i <= 'Z'.charCodeAt(0); i++) {
            addLetter(i);
        }

        function addLetter(code) {
            var letter = String.fromCharCode(code);

            artists.push({
                isLetter: true,
                letter: letter
            });

            letters.push(letter);
        }

    };


    if ($state.current.name == 'menu.artist-list') {
        var letters = $scope.letters = [];
        var artists = $scope.artists = [];
        self.getArtists(true);

        //Letters are shorter, everything else is 52 pixels
        $scope.getItemHeight = function(item) {
            return item.isLetter ? 40 : 100;
        };

        $scope.scrollTop = function() {
            $ionicScrollDelegate.scrollTop();
        };

        $scope.scrollBottom = function() {
            $ionicScrollDelegate.scrollBottom();
        };

        var letterHasMatch = {};
        $scope.getArtistsList = function() {
            letterHasMatch = {};
            //Filter contacts by $scope.search.
            //Additionally, filter letters so that they only show if there
            //is one or more matching contact
            return artists.filter(function(item) {
                var itemDoesMatch = !$scope.view.search || item.isLetter ||
                    item.name.toLowerCase().indexOf($scope.view.search.toLowerCase()) > -1;

                //console.log(item.last_name.toString().charAt(0));

                //Mark this person's last name letter as 'has a match'


                if (!item.isLetter && itemDoesMatch) {

                    var letter = item.name.charAt(0).toUpperCase();
                    //console.info('name ', item.name,'   char code: ',item.name.charCodeAt(0));
                    //if ( item.name.charCodeAt(0) < 65 || item.name.charCodeAt(0) > 90)
                    if ( item.name.charCodeAt(0) < 65)
                        letter = "#";

                    letterHasMatch[letter] = true;
                }

                return itemDoesMatch;
            }).filter(function(item) {
                //Finally, re-filter all of the letters and take out ones that don't
                //have a match
                if(item.isLetter && !letterHasMatch[item.letter])
                    return false;

                return true;
            });
        };

        $scope.clearSearch = function () {
            $scope.view.search = '';
        };
    }

    if ($state.current.name == 'menu.artist-discover') {
        if($localStorage.lastUpdate != $scope.view.currentDate)
        {
            VersionService.resource.get().$promise.then(function(response){
                if(response.data.version != $localStorage.version)
                {
                    var confirmPopup = $ionicPopup.confirm({
                        title: 'Nueva actualización',
                        template: '¿Desea descargar los nuevos datos?'
                    });

                    confirmPopup.then(function(confirm) {
                        if(confirm)
                        {
                            DBService.init(true);
                            self.getArtists(false);
                            $localStorage.version = response.data.version;
                            $localStorage.lastUpdate = $filter('date')(new Date(), 'yyyy-MM-dd');
                        }else
                        {
                            self.getArtists(false);
                            $localStorage.lastUpdate = $filter('date')(new Date(), 'yyyy-MM-dd');
                        }
                    });
                }else{
                    self.getArtists(false);
                }
            },function(error) {
                self.getArtists(false);
            });
        }else{
            self.getArtists(false);
        }



        $scope.playTrack = function(artist) {
            $rootScope.$broadcast('music:clear', true);
            if($scope.view.isPause && $scope.view.currentTrack.spotify_id == artist.spotify_id)
            {
                MusicService.play();
            }else{
                SpotifyService.getTopTracks(artist.spotify_id).then(function(tracks){
                    var track = {};
                    track.spotify_id = artist.spotify_id;
                    track.artist  = tracks[0].artists[0].name;
                    track.name = tracks[0].name;
                    track.url = tracks[0].preview_url;
                    MusicService.clear();
                    MusicService.add(track, false);
                    MusicService.play();
                });
            }

        };

        $scope.pauseTrack = function(){
            MusicService.pause();
        };


        $scope.$on('music:play', function(event, args) {
            $scope.view.isPlaying = true;
            $scope.view.isPause = false;
            $scope.view.currentTrack = args;
        });

        $scope.$on('music:pause', function(event, args) {
            $scope.view.isPlaying = false;
            $scope.view.isPause = true;
            $scope.view.currentTrack = args;
        });

    }

    if ($state.current.name == 'menu.artist-detail') {
        ArtistService.getById($stateParams.id).then(function(artist){
            $scope.view.artist = artist;
            $scope.view.ready = true;
        });


        $scope.playTrack = function(artist) {
            $rootScope.$broadcast('music:clear', true);
            if($scope.view.isPause && $scope.view.currentTrack.spotify_id == artist.spotify_id)
            {
                MusicService.play();
            }else{
                SpotifyService.getTopTracks(artist.spotify_id).then(function(tracks){
                    var track = {};
                    track.spotify_id = artist.spotify_id;
                    track.artist  = tracks[0].artists[0].name;
                    track.name = tracks[0].name;
                    track.url = tracks[0].preview_url;
                    MusicService.clear();
                    MusicService.add(track, false);
                    MusicService.play();
                });
            }

        };

        //$scope.showShareMenu = function() {
        //
        //    $ionicActionSheet.show({
        //        titleText: 'Share',
        //        buttons: [
        //            {text: "Share on Facebook"},
        //            {text: "Share on Twitter"},
        //            {text: "Send email"}
        //        ],
        //        cancelText: 'Cancel',
        //        cancel: function () {
        //            console.log('CANCELLED');
        //        },
        //        buttonClicked: function (index) {
        //            console.log('BUTTON CLICKED', index);
        //            return true;
        //        }
        //    });
        //};
        $scope.shareAnywhere = function(artist) {
            //console.info('artist', artist);
            var name = artist.name;
            var image = $scope.view.server_image+"artists/"+artist.id+"/cover/"+artist.image_cover;
            $cordovaSocialSharing.share("Te recomiendo "+name+" en el #FestivalDeLesArts", "Festival de les arts", image, "http://www.festivaldelesarts.com/");
        };

    }


});
app.controller('BaseController', function ($scope, $state) {

    $scope.init = function()
    {
        $scope.state = $state;
        $scope.view = {};
        $scope.view.navigation = false;
        $scope.view.show = 'sign_in';
    };

    $scope.init();

    $scope.openLink = function(link){
        window.open(link, '_system', 'location=yes');
    };

    $scope.login = function(){
        $scope.view.show = 'sign_in';
        $state.go('base.login');
    };

    $scope.register = function(){
        $state.go('base.register');
        $scope.view.show = 'sign_up';
    };
});
app.controller('CoolwayController', function($scope, CoolwayService, GLOBAL, $ionicLoading, $state, $stateParams, $cordovaSocialSharing){

    $scope.loadPhotos = function(){
        $ionicLoading.show({
            content: 'Cargando',
            animation: 'fade-in',
            showBackdrop: true,
            maxWidth: 200,
            showDelay: 0
        });
        // Get all the Coolway Photos
        CoolwayService.resource.getAll().$promise.then(function(photos){
            console.info('photos', photos.data);
            $scope.view.photos = photos.data;
            $ionicLoading.hide();
            $scope.view.ready = true;
        });
    };

    $scope.init = function()
    {
        $scope.view = {};
        $scope.view.photos = {};
        $scope.view.server_image = GLOBAL.server.image;
        $scope.view.feast_id = GLOBAL.api.feast;
        $scope.loadPhotos();
    };

    $scope.init();


    $scope.showDetail = function(image){
        $state.go('menu.coolway-detail', {'image': image});
    };

    if ($state.current.name == 'menu.coolway-detail') {
        console.info('$stateParams.image',$stateParams.image);
        $scope.view.image = $stateParams.image;
    }


    $scope.openPage = function(type, url){

        var scheme;
        var link;

        if(type == 'BROWSER')
        {
            window.open(url, '_system', 'location=yes');
        }else{
            switch(type)
            {
                case 'FACEBOOK':
                    link = 'fb://publish/profile/345546062072';
                    if(ionic.Platform.isAndroid())
                        scheme = 'com.facebook.katana';
                    else
                        scheme = 'fb://';
                    break;
                case 'TWITTER':
                    link = 'twitter://user?screen_name=coolwayspain';
                    if(ionic.Platform.isAndroid())
                        scheme = 'com.twitter.android';
                    else
                        scheme = 'twitter://';
                    break;
                case 'INSTAGRAM':
                    link = 'instagram://user?username=coolway_spain';
                    if(ionic.Platform.isAndroid())
                        scheme = 'com.instagram.android';
                    else
                        scheme = 'instagram://';
                    break;
            }

            appAvailability.check(
                scheme, // URI Scheme
                function() {  // Success callback
                    window.open(link, '_system', 'location=no');
                },
                function() {  // Error callback
                    window.open(url, '_system', 'location=yes');
                }
            );
        }

    };


    $scope.shareImage = function(image)
    {
        console.info('image', image);
        $cordovaSocialSharing.share(null, null, image, null);
    };


});

app.controller('FavoriteController', function($scope) {

    $scope.init = function()
    {
        $scope.view = {};
        $scope.view.scheduleActive = false;
    };

    $scope.$on('schedule:change', function(event, args) {
        $scope.view.scheduleActive = args;
    });

});

app.controller('InfoController', function($scope, $state) {

    $scope.init = function()
    {
        $scope.view = {};
    };

    $scope.init();

    $scope.go = function(state){
        $state.go(state);
    };

});

app.controller('LoginController', function ($scope, $state, $http, $ionicLoading, GLOBAL, $ionicPopup, $cordovaOauth, UserService) {

    $scope.init = function()
    {
        $scope.view = {};
        $scope.view.show = 'sign_in';
        $scope.view.show_login = 'options';
        $scope.view.user = new UserService.resource();
        $scope.view.loginEmail = false;

    };

    $scope.init();


    $scope.later = function(){
      $state.go('menu.artist-discover');
    };

    $scope.loginFacebook = function () {
        $cordovaOauth.facebook(GLOBAL.facebook.client_id, ["email"]).then(function (result) {
            $ionicLoading.show({
                template: 'Verificando ...'
            });

            $http.get("https://graph.facebook.com/"+GLOBAL.facebook.api_version+"/me", {
                params: {
                    access_token: result.access_token,
                    fields: "id,email,name",
                    format: "json"
                }
            }).then(function (result) {
                console.info('result', result);
                $scope.view.user.email = result.data.email;
                $scope.view.user.name = result.data.name;
                $scope.view.user.social = true;
                $scope.view.user.$login(function (response) {
                    UserService.setUser(response);
                    $state.go("menu.artist-discover");
                    $ionicLoading.hide();
                }, function (error) {
                    $ionicLoading.hide();
                    $ionicPopup.alert({
                        title: error.data.message
                    });
                });
            }, function () {
                $ionicLoading.hide();

                $ionicPopup.alert({
                    title: 'Error Intente Nuevamente'
                });
            });
        }, function () {
            $ionicLoading.hide();

            $ionicPopup.alert({
                title: 'Error Intente Nuevamente'
            });
        });
    };


    $scope.toggleLoginEmail = function ()
    {
        $scope.view.loginEmail = !$scope.view.loginEmail;
    };



    $scope.login = function () {
        if (!$scope.view.user.email || !UserService.validateEmail($scope.view.user.email)) {
            $ionicPopup.alert({
                title: "Ingrese un email valido"
            });
        }
        else if (!$scope.view.user.password) {
            $ionicPopup.alert({
                title: "Ingrese su contraseña"
            });
        }
        else {
            $ionicLoading.show({
                template: 'Iniciando...'
            });

            $scope.view.user.$login(function (response){
                UserService.setUser(response);
                $state.go("menu.artist-discover");
                $ionicLoading.hide();
            }, function (error) {
                $ionicLoading.hide();
                $ionicPopup.alert({
                    title: error.data.message
                });
            });
        }
    };




});
app.controller('MainController', function($scope) {

    $scope.init = function()
    {
        $scope.view = {};
    };

    $scope.init();

});

app.controller('MapHowGetController', function ($scope, $cordovaGeolocation, $ionicLoading, GLOBAL, MapService, $cordovaDevice, $ionicPopup) {

    self.getMapAndLocations = function(){
        return MapService.resource.getAll().$promise.then(function(map){
            return map;
        },function(error) {
            return error;
        });
    };

    $scope.init = function(){
        $scope.server_image = GLOBAL.server.image;
        $scope.view.ready = false;
        // Setup the loader
        $ionicLoading.show({
            content: 'Cargando',
            animation: 'fade-in',
            showBackdrop: true,
            maxWidth: 200,
            showDelay: 0
        });

        // Get all the artists
        MapService.getAll().then(function(map){

            if(map.length > 0)
            {
                $scope.mapData = map[0];
                self.loadMap();
            }
            else{
                self.getMapAndLocations().then(function(map){
                    $scope.mapData = map.data;
                    MapService.add(map.data);
                    self.loadMap();
                });
            }

            $ionicLoading.hide();
            $scope.view.ready = true;
        });
    };



    self.loadMap = function() {

        if($scope.mapData.latitude.length > 0)
            $scope.centroLatlng = new google.maps.LatLng($scope.mapData.latitude, $scope.mapData.longitude);

        var mapOptions = {
            center: $scope.centroLatlng,
            scrollwheel: false,
            zoom: 15,
            maxZoom: 19,
            streetViewControl: false,
            zoomControl: true,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        var map = new google.maps.Map(document.getElementById("map-how-get"), mapOptions);

        $scope.map = map;
        $scope.directionsDisplay = new google.maps.DirectionsRenderer({polylineOptions: { strokeColor: 'red' }});


        //var image = 'images/beachflag.png';
        var beachMarker = new google.maps.Marker({
            position: $scope.centroLatlng,
            map: $scope.map
            //icon: image
        });
        $scope.map.setZoom(15);
        $scope.map.setCenter($scope.centroLatlng);
    };




    $scope.goFromMyLocation = function(mode)
    {
        //document.getElementById("id_waiting").style.visibility = 'visible';
        //navigator.geolocation.getCurrentPosition(function(position) {
        var posOptions = {timeout: 10000, enableHighAccuracy: true, maximumAge: 1000 * 60 * 60};
        $cordovaGeolocation.getCurrentPosition(posOptions)
            .then(function (position) {
            var myLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
           // var myLocation = new google.maps.LatLng(39.456673, -0.363268);
            var directionsService = new google.maps.DirectionsService;
            $scope.directionsDisplay.setMap($scope.map);

            directionsService.route(
                {
                    origin: myLocation,
                    destination: $scope.centroLatlng,
                    travelMode: google.maps.TravelMode[mode]
                },
                function(response, status)
                {
                    if (status === google.maps.DirectionsStatus.OK) {
                        $scope.directionsDisplay.setDirections(response);
                    } else {
                        $ionicPopup.show({
                            template: '<p style="color:#000;">Desde tu ubicación no se puede realizar el recorrido.</p>',
                            title: 'Recorrido no disponible',
                            buttons: [
                                {
                                    text: '<b>Aceptar</b>',
                                    type: 'button-positive'
                                }
                            ]
                        });
                    }
                });
           // document.getElementById("id_waiting").style.visibility = 'hidden';
        }, function (err) {

                $ionicPopup.show({
                    template: '<p style="color:#000;">Para poder usar tu ubicación debes tener activado tu gps.</p>',
                    title: 'Activar GPS',
                    buttons: [
                        {
                            text: '<b>Aceptar</b>',
                            type: 'button-positive'
                        }
                    ]
                });
            });

        //var options = {timeout: 40000, enableHighAccuracy: false};
        //$cordovaGeolocation.getCurrentPosition(options).then(function(position)
        //{
        //    console.info('My position: ', position);
        //    var myLocation = new google.maps.LatLng(39.456673, -0.363268);
        //   // var myLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
        //    var directionsService = new google.maps.DirectionsService;
        //    $scope.directionsDisplay.setMap($scope.map);
        //
        //    directionsService.route(
        //        {
        //            origin: myLocation,
        //            destination: $scope.centroLatlng,
        //            travelMode: google.maps.TravelMode[metodo]
        //        },
        //        function(response, status)
        //        {
        //            if (status === google.maps.DirectionsStatus.OK) {
        //                $scope.directionsDisplay.setDirections(response);
        //            } else {
        //                window.alert(status);
        //            }
        //        });
        //    document.getElementById("id_waiting").style.visibility = 'hidden';
        //}, function(error) {
        //    console.info('error location', error);
        //});
    };

    $scope.init();

});
app.controller('MapController', function ($scope, $cordovaGeolocation, $ionicLoading, $cordovaDevice, GLOBAL, MapService, $ionicPopup) {

    self.getMapAndLocations = function(){
       // console.info('getMapAndLocations');
        return MapService.resource.getAll().$promise.then(function(map){
            return map;
        },function(error) {
            return error;
        });
    };

    $scope.init = function(){
        $scope.server_image = GLOBAL.server.image;
        $scope.view.ready = false;
        $scope.mapData = {};
        // Setup the loader
        $ionicLoading.show({
            content: 'Cargando',
            animation: 'fade-in',
            showBackdrop: true,
            maxWidth: 200,
            showDelay: 0
        });

        // Get all the Locations
        MapService.getAll().then(function(map){

            if(map.length > 0)
            {
                //console.info('database', map);
                $scope.mapData = map[0];

                MapService.getAllLocations().then(function(locations){
                    if(locations.length > 0)
                    {
                        $scope.locations = locations;
                        self.loadMap();
                    }else{
                        self.getMapAndLocations().then(function(map){
                            //console.info('api', map);
                            $scope.mapData = map.data;
                            $scope.locations = [];
                            MapService.add(map.data);

                            var cont = 0;
                            angular.forEach(map.data.locations, function (value, key) {
                                MapService.addLocation(value);
                                $scope.locations.push(value);
                                cont = cont+1;
                            });

                            self.loadMap();
                        });
                    }
                });
            }
            else{
                self.getMapAndLocations().then(function(map){
                   // console.info('api', map);
                    $scope.mapData = map.data;
                    $scope.locations = [];
                    MapService.add(map.data);

                    var cont = 0;
                    angular.forEach(map.data.locations, function (value, key) {
                        MapService.addLocation(value);
                        $scope.locations.push(value);
                        cont = cont+1;
                    });
                    self.loadMap();
                });
            }

            $ionicLoading.hide();
            $scope.view.ready = true;
        });
    };



    self.loadMap = function() {
        var marker, i;
        var infoWindow = new google.maps.InfoWindow();
        var imgOver;

        if($scope.mapData.latitude.length > 0)
            $scope.centroLatlng = new google.maps.LatLng($scope.mapData.latitude, $scope.mapData.longitude);

        var mapOptions = {
            center: $scope.centroLatlng,
            scrollwheel: false,
            streetViewControl: false,
            zoomControl: true,
            zoom: 17,
            maxZoom: 19,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        var map = new google.maps.Map(document.getElementById("map"), mapOptions);

        if($scope.locations.length > 0)
        {
            angular.forEach($scope.locations, function (value, key) {
                marker = new google.maps.Marker({
                    position: new google.maps.LatLng(value.latitude, value.longitude),
                    map: map,
                    title: value.name,
                    icon: new google.maps.MarkerImage($scope.server_image+'googlemap/'+value.image)
                });
                google.maps.event.addListener(marker, 'click', (function(marker, i)
                {
                    return function() {
                        infoWindow.setContent(value.detail);
                        infoWindow.open(map, marker);
                    }
                })(marker, i));
            });
        }

        var imageBounds = {
            north: 39.458577,
            south: 39.452215,
            east: -0.347785,
            west: -0.356626
        };
        var overlayOpts = {
            opacity: 1
        };
        //imgOver = new google.maps.GroundOverlay($scope.server_image+'feast/'+$scope.mapData.image, imageBounds, overlayOpts);
        imgOver = new google.maps.GroundOverlay('img/map/precint.png', imageBounds, overlayOpts);
        imgOver.setMap(map);

        $scope.map = map;
        $scope.directionsDisplay = new google.maps.DirectionsRenderer({polylineOptions: { strokeColor: 'red' }});

        //var image = 'images/beachflag.png';
        //var beachMarker = new google.maps.Marker({
        //    position: $scope.centroLatlng,
        //    map: $scope.map
        //    //icon: image
        //});
        //$scope.map.setZoom(17);
        //$scope.map.setCenter($scope.centroLatlng);
    };



    $scope.showMyLocation = function() {
        //document.getElementById("id_waiting").style.visibility = 'visible';
        //navigator.geolocation.getCurrentPosition(function(position) {
        var posOptions = {timeout: 10000, enableHighAccuracy: true, maximumAge: 1000 * 60 * 60};
        $cordovaGeolocation.getCurrentPosition(posOptions)
            .then(function (position) {

                console.info('my location', position);
                var mypos = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);

                var myMarker = new google.maps.Marker({
                    position: mypos,
                    map: $scope.map,
                    icon: 'img/map/my-location-icon.png'
                });
                //var myInfoWindow = new google.maps.InfoWindow({
                //    map: $scope.map,
                //    position: mypos,
                //    content: 'Tú estás aquí',
                //    pixelOffset: new google.maps.Size(0, -40)
                //});
                $scope.map.setZoom(17);
                $scope.map.setCenter(mypos);

                //document.getElementById("id_waiting").style.visibility = 'hidden';
            }, function (err) {

                $ionicPopup.show({
                    template: '<p style="color:#000;">Para poder usar tu ubicación debes tener activado tu gps.</p>',
                    title: 'Activar GPS',
                    buttons: [
                        {
                            text: '<b>Aceptar</b>',
                            type: 'button-positive'
                        }
                    ]
                });
            });
    };

    $scope.init();

});
app.controller('MenuController', function($rootScope, $scope, $ionicModal, ScheduleService, $ionicPopup, $ionicPlatform, DBService, $state, GLOBAL, Spotify, UserService, $ionicLoading, FavoriteService, ArtistService, NotificationService, WeatherService, $cordovaSocialSharing, $filter) {
//app.controller('MenuController', function($rootScope, $scope, $ionicModal, ScheduleService, $ionicPopup, $ionicPlatform, $state, GLOBAL, Spotify, UserService, $ionicLoading, FavoriteService, ArtistService, NotificationService, WeatherService, $cordovaSocialSharing, $filter) {
    $scope.init = function(){
        console.info('init db');
        DBService.init();
        $scope.view = {};
        $scope.view.server_image = GLOBAL.server.image;
        $scope.view.show_list = 'favorites';
        $scope.view.favorites = false;
        $scope.view.notifications = false;

        $scope.view.setting = {};
        $scope.view.setting.notifications = true;
        $scope.view.pass = new UserService.resource();
        $scope.view.weathers = {};

        if(UserService.isLogged())
        {
            $scope.view.user = UserService.getUser();
        }

        $scope.view.scheduleActive = false;

        ScheduleService.resource.getAll().$promise.then(function(response){
            $scope.view.scheduleActive = response.data.status;
            $rootScope.$broadcast('schedule:change', response.data.status);
        });

    };

    $scope.init();

    $scope.$on('favorite:change', function(event, args) {
        console.info('favorite change');
        if(UserService.isLogged())
            self.getFavorites();

    });

    $scope.$on('artist:ready', function(event, args) {
        if(UserService.isLogged())
        {
            console.info('entro favoritos logeados');
            self.getFavorites();
            self.getNotifications();
        }else
            console.info("no logged");

    });

    self.getFavorites = function(){
        //$ionicLoading.show({
        //    content: 'Cargando',
        //    animation: 'fade-in',
        //    showBackdrop: true,
        //    maxWidth: 200,
        //    showDelay: 0
        //});
        // Get all the favorites
        FavoriteService.getAll().then(function(favorites){
            console.info('database favs out', favorites);
            if(favorites.length > 0)
            {
                var ids = [];
                angular.forEach(favorites, function (value, key) {
                    ids.push(value.artist_id);
                });
                ArtistService.getFavorites(ids).then(function(favorites){
                    console.info('database favs', favorites);
                    $scope.view.favorites = favorites;
                    $scope.view.ready = true;
                    //$ionicLoading.hide();
                });
            }
            else{
                console.info('api favs 1');
                FavoriteService.resource.getAll().$promise.then(function(favorites){
                    if(favorites.data.length > 0)
                    {
                        var ids = [];
                        angular.forEach(favorites.data, function (value, key) {
                            FavoriteService.add(value.id);
                            ids.push(value.id);
                        });
                        ArtistService.getFavorites(ids).then(function(favorites){
                            console.info('api favs final', favorites);
                            $scope.view.favorites = favorites;
                            $scope.view.ready = true;
                            //$ionicLoading.hide();
                        });
                    }else{
                        $scope.view.favorites = {};
                        $scope.view.ready = true;
                        //$ionicLoading.hide();
                    }

                },function(error) {
                    console.info('error', error);
                    $scope.view.ready = true;
                    //$ionicLoading.hide();
                });
            }

        });
    };

    self.getNotifications = function(){
        // Get all the notifications
        NotificationService.resource.getAll().$promise.then(function(notifications){
            console.info('notifications', notifications);
            if(notifications.data.length > 0)
            {
                $scope.view.notifications = notifications.data;
            }else{
                $scope.view.notifications = {};
                $scope.view.ready = true;
            }

        },function(error) {
            console.info('error', error);
            $scope.view.ready = true;
            //$ionicLoading.hide();
        });
    };


    // Create the settings modal that we will use later
    $ionicModal.fromTemplateUrl('templates/user/settings.html', {
        scope: $scope
    }).then(function(modal) {
        $scope.modalSettings = modal;
    });

    // Open the login modal
    $scope.openSettings = function() {
        console.info($scope.view.user);

        if(UserService.isLogged())
            $scope.modalSettings.show();
        else{
            var confirmPopup = $ionicPopup.confirm({
                title: 'Iniciar sesión',
                template: 'Para ingresar debes estar logeado'
            });

            confirmPopup.then(function(response) {
                if(response)
                    $state.go("base.login");
            });
        }


    };

    // Triggered in the login modal to close it
    $scope.closeSettings = function() {
        $scope.modalSettings.hide();
    };

    $scope.changePassword = function () {
        if (!$scope.view.pass.current_password) {
            $ionicPopup.alert({
                title: "Ingrese su contraseña actual"
            });
        }
        else if (!$scope.view.pass.new_password) {
            $ionicPopup.alert({
                title: "Ingrese su nueva contraseña"
            });
        }
        else if ($scope.view.pass.new_password == $scope.view.confirm) {
            $ionicPopup.alert({
                title: "Las contraseñas deben ser iguales"
            });
        }
        else if ($scope.view.pass.current_password.length < 8 || $scope.view.pass.new_password.length < 8 || $scope.view.pass.confirm.length < 8 ) {
            $ionicPopup.alert({
                title: "Las contraseña debe tener al menos 8 caracteres"
            });
        }
        else {
            $ionicLoading.show({
                template: 'Actualizando...'
            });

            $scope.view.pass.email = UserService.getUser().email;
            $scope.view.pass.$updatePassword(function (response){
                UserService.setUser(response);
                $ionicLoading.hide();
            }, function (error) {
                $ionicLoading.hide();
                $ionicPopup.alert({
                    title: error.data.message
                });
            });
        }
    };



    $scope.logout = function(){
        $ionicLoading.show({
            template: 'Cerrando...'
        });
        UserService.logout();
        $state.go("base.login");
        $scope.closeSettings();
        $ionicLoading.hide();
    };

    $scope.openLink = function(link){
        window.open(link, '_system', 'location=yes');
    };

    $scope.showArtistDetail = function(id){
        if(id > 0)
            $state.go('menu.artist-detail', {'id': id});
        else
            return false;
    };


    $scope.shareFavorites = function() {
        var message = "";
        angular.forEach($scope.view.favorites, function (value, key) {
                message += " \r\n"+$filter('cleanName')(value.name)+" \r\n"+$filter('parseDate')(value.schedule)+" - "+$filter('parseDate')(value.schedule, 'HH:mm')+"\r\n"+value.stage_name+" \r\n";
        });
        $cordovaSocialSharing.share("Mis artistas favoritos  en el #FestivalDeLesArts: \r\n"+message, "Festival de les arts", '', "\r\n http://www.festivaldelesarts.com/");
    };

    $scope.getWeather = function(){
        console.info('weather afuera', $scope.view.weathers.length);
        if($scope.view.weathers)
        {
            WeatherService.resource.getAll().$promise.then(function(weathers){
                console.info('weather', weathers);
                $scope.view.weathers = weathers.data;
            });
        }
    };


});

app.controller('notificationController', function($scope) {

    $scope.init = function()
    {
        $scope.view = {};
    };



});

app.controller('PlayerController', function ($scope, $ionicModal, $cordovaOauth, $localStorage, Spotify, SpotifyService, $ionicLoading, GLOBAL, MusicService) {

    $scope.init = function(){
        $scope.view = {};
        $scope.view.playslist = [];
    };

    $scope.init();

    $scope.performLogin = function() {
        $cordovaOauth.spotify(GLOBAL.spotify.client_id, ['user-read-private', 'playlist-read-private']).then(function(result) {
            $localStorage.spotify_token = result.access_token;
            Spotify.setAuthToken(result.access_token);
            $scope.updateInfo();
        }, function(error) {
            console.log("Error -> " + error);
        });
    };


    $scope.loadPlayList = function(){
        $ionicLoading.show({
            content: 'Cargando',
            animation: 'fade-in',
            showBackdrop: true,
            maxWidth: 200,
            showDelay: 0
        });

        SpotifyService.gerPlayList().then(function(data){
            if(data.tracks.items.length > 0)
            {
                $scope.view.playslist = data.tracks.items;
                MusicService.clear();
                angular.forEach(data.tracks.items, function(value, key) {
                    var track = {};
                    track.spotify_id = value.track.id;
                    track.artist  = value.track.artists[0].name;
                    track.name = value.track.name;
                    track.url = value.track.preview_url;
                    MusicService.add(track, true);
                });
                MusicService.play();
                $scope.modal.show();
                $ionicLoading.hide();
            }

        });
    };

    $scope.updateInfo = function() {
        Spotify.getCurrentUser().then(function (data) {
            $scope.loadPlayList();
        }, function(error) {
            $scope.performLogin();
        });
    };


    $ionicModal.fromTemplateUrl('templates/player/main.html', {
        scope: $scope
    }).then(function(modal) {
        $scope.modal = modal;
    });

    // Open the modal player
    $scope.openPlayList = function() {

        var storedToken = $localStorage.spotify_token;
        if (storedToken !== null) {
            Spotify.setAuthToken(storedToken);
            $scope.updateInfo();
        } else {
            $scope.performLogin();
        }

    };

    $scope.openPlaylistModal = function(){
        $scope.modal.show();
    };

    // Triggered in the player modal to close it
    $scope.closePlayer = function() {
        $scope.modal.hide();
    };


    $scope.playTrack = function(id) {
        MusicService.play(id);
    };

    $scope.pauseTrack = function(){
        MusicService.pause();
    };


    $scope.$on('music:play', function(event, args) {
        $scope.view.isPlaying = true;
        $scope.view.isPause = false;
        $scope.view.currentTrack = args;
    });

    $scope.$on('music:pause', function(event, args) {
        $scope.view.isPlaying = false;
        $scope.view.isPause = true;
        $scope.view.currentTrack = args;
    });

    $scope.$on('music:clear', function(event, args) {
        $scope.view.playslist = [];
    });

});
app.controller('PosterController', function ($scope, $cordovaGeolocation, $ionicLoading, GLOBAL, PosterService) {

    $scope.init = function(){
        $scope.view.server_image = GLOBAL.server.image;
        $scope.view.feast = GLOBAL.api.feast;
        $scope.view.ready = false;
        // Setup the loader
        $ionicLoading.show({
            content: 'Cargando',
            animation: 'fade-in',
            showBackdrop: true,
            maxWidth: 200,
            showDelay: 0
        });

        // Get the poster
        //PosterService.get().then(function(poster){
        //
        //    if(poster.length > 0)
        //    {
        //        console.info('database', poster);
        //        $scope.view.poster = poster;
        //        $ionicLoading.hide();
        //    }
        //    else{
                PosterService.resource.getAll().$promise.then(function(poster){
                    console.info('api', poster);
                    $scope.view.poster = poster.data;
                 //   PosterService.add(poster.data);
                    $ionicLoading.hide();
                });
            //}
        //});
    };

    $scope.init();

});
app.controller('RecoverController', function ($scope, $state, $ionicLoading, $ionicPopup, UserService) {


    $scope.init = function()
    {
        $scope.view = {};
        $scope.view.user = new UserService.resource();
    };

    $scope.init();

    $scope.recoverPassword = function () {
        if (!$scope.view.user.email || !UserService.validateEmail($scope.view.user.email)) {
            $ionicPopup.alert({
                title: "Ingrese un email valido"
            });
        }
        else {
            $ionicLoading.show({
                template: 'Recuperando contraseña...'
            });

            $scope.view.user.$recoverPassword(function (response) {
                $ionicPopup.alert({
                    title: "La nueva contraseña ha sido enviada a su email"
                });
                $state.go("base.login");
                $ionicLoading.hide();
            }, function (error) {
                $ionicLoading.hide();
                $ionicPopup.alert({
                    title: error.data.message
                });
            });
        }
    };
});
app.controller('RegisterController', function ($scope, $state, $ionicLoading, $ionicPopup, UserService) {


    $scope.init = function()
    {
        $scope.view = {};
        $scope.view.show = 'sign_up';
        $scope.view.show_login = 'options';
        $scope.view.user = new UserService.resource();
        $scope.view.loginEmail = false;
    };

    $scope.init();

    $scope.signUp = function () {
        if (!$scope.view.user.name) {
            $ionicPopup.alert({
                title: "Ingrese su nombre"
            });
        }
        else if (!$scope.view.user.email || !UserService.validateEmail($scope.view.user.email)) {
            $ionicPopup.alert({
                title: "Ingrese un email valido"
            });
        }
        else if (!$scope.view.user.password) {
            $ionicPopup.alert({
                title: "Ingrese su contraseña"
            });
        }
        else if ($scope.view.user.password.length < 8) {
            $ionicPopup.alert({
                title: "Las contraseña debe tener al menos 8 caracteres"
            });
        }
        else {
            $ionicLoading.show({
                template: 'Registrando Cuenta ...'
            });

            $scope.view.user.$register(function (response) {
                UserService.setUser(response);
                $state.go("menu.artist-discover");
                $ionicLoading.hide();
            }, function (error) {
                $ionicLoading.hide();
                $ionicPopup.alert({
                    title: error.data.message
                });
            });
        }
    };
});
app.controller('ScheduleController', function($scope,ArtistService, ScheduleService, $ionicLoading, GLOBAL, $state) {

    $scope.init = function()
    {
        $scope.view = {};
        $scope.view.ready = false;
        $scope.view.show_list = 'time';
        $scope.view.show_day = 9;
        $scope.view.server_image = GLOBAL.server.image;
        $scope.view.scheduleActive = false;
        $ionicLoading.show({
            content: 'Cargando',
            animation: 'fade-in',
            showBackdrop: true,
            maxWidth: 200,
            showDelay: 0
        });
        ScheduleService.resource.getAll().$promise.then(function(response){
            $scope.view.scheduleActive = response.data.status;
            $scope.view.ready = true;
            $ionicLoading.hide();
        },function(error) {
            $scope.view.ready = true;
            $ionicLoading.hide();
        });
    };

    $scope.init();


    $scope.showDetail = function(id){
        if(id > 0)
            $state.go('menu.artist-detail', {'id': id});
        else
            return false;
    };

    self.getArtists = function(){

        // Get all the artists
        ArtistService.getAll().then(function(artists){

            if(artists.length > 0)
            {
                console.info('database', artists);
                $scope.view.artists = artists;
            }
            else{
                // Setup the loader
                $ionicLoading.show({
                    content: 'Cargando',
                    animation: 'fade-in',
                    showBackdrop: true,
                    maxWidth: 200,
                    showDelay: 0
                });
                ArtistService.resource.getAll().$promise.then(function(artists){
                    console.info('api', artists);
                    $scope.view.artists = artists.data;
                    angular.forEach(artists.data, function (value, key) {
                        ArtistService.add(value);
                    });
                    $ionicLoading.hide();
                },function(error) {
                    console.info('error', error);
                    $ionicLoading.hide();
                });
            }

        });
    };


    self.getArtists();






});

app.controller('SocialController', function($scope, FacebookService, InstagramService, TwitterService, $localStorage) {

    $scope.init = function()
    {
        $scope.view = {};
        $scope.view.pics = [];
        $scope.newItemsIT = [];
        $scope.noMoreItemsAvailableIT = false;
        $scope.have = [];
        $scope.view.orderBy = "-likes.count";
        $scope.view.show = "facebook";
    };

    $scope.init();

    self.chunk = function(arr, size) {
        var newArr = [];
        for (var i=0; i<arr.length; i+=size) {
            newArr.push(arr.slice(i, i+size));
        }
        console.info('return', newArr);
        return newArr;
    };

    $scope.correctTimestring = function(string) {
        return new Date(Date.parse(string));
    };


    $scope.showTimeLine = function() {
        TwitterService.getTimeLine().then(function(data) {
            $scope.view.twTimeline = data;
        }, function(error) {
            console.info(error);
        });
    };
    $scope.doRefresh = function() {
        $scope.showTimeLine();
        $scope.$broadcast('scroll.refreshComplete');
    };


    $scope.loadTwitter = function(){
        $scope.view.show = 'twitter';
        if (TwitterService.isAuthenticated()) {
            $scope.showTimeLine();
        } else {
            TwitterService.initialize().then(function(result) {
                if(result === true) {
                    $scope.showTimeLine();
                }
            });
        }
    };


    $scope.getData = function() {
        //InstagramService.fetchImages(function(data) {
        //    console.info('instagram', data);
        //    for(var i=0; i<data.length; i++) {
        //        if (typeof $scope.have[data[i].id]==="undefined") {
        //            $scope.view.pics.push(data[i]) ;
        //            $scope.have[data[i].id] = "1";
        //        }
        //    }
        //});
        InstagramService.GetFeed().then(function(items) {
            $scope.view.pics = items.concat($scope.items);
        });
        if ($localStorage.hasOwnProperty("fbAccessToken") === true) {
            FacebookService.fetchFeed().then(function (response) {
                $scope.view.facebookFeed = response.data;
                console.info('facebook',$scope.view.facebookFeed);
            });
            FacebookService.getProfilePicture().then(function (response) {
                $scope.view.facebookPicture = response;
            });

        }else{
            FacebookService.getAccessToken().then(function (data) {
                $localStorage.fbAccessToken = data;
                FacebookService.fetchFeed().then(function (response) {
                    $scope.view.facebookFeed = response.data;
                    console.info('facebook',$scope.view.facebookFeed);
                });
            });
        }

    };

    $scope.getData();




    $scope.doRefreshInstagram = function() {
        if ($scope.newItems.length > 0) {
            $scope.view.pics = $scope.newItems.concat($scope.view.pics);

            //Stop the ion-refresher from spinning
            $scope.$broadcast('scroll.refreshComplete');

            $scope.newItems = [];
        } else {
            InstagramService.GetNewPhotos().then(function(items) {


                $scope.view.pics = items.concat($scope.view.pics);

                //Stop the ion-refresher from spinning
                $scope.$broadcast('scroll.refreshComplete');
            });
        }
    };
    $scope.LoadMoreInstagram = function() {
        InstagramService.GetOldPhotos().then(function(items) {

            $scope.view.pics = $scope.view.pics.concat(items);

            $scope.$broadcast('scroll.infiniteScrollComplete');

            // an empty array indicates that there are no more items
            if (items.length === 0) {
                $scope.noMoreItemsAvailableIT = true;
            }

        });
    };

});
app.controller('StreamingController', function($scope) {

    $scope.init = function()
    {
        $scope.view = {};
    };



});

app.controller('TicketController', function($scope) {

    $scope.init = function()
    {
        $scope.view = {};
    };


});

app.directive('countdown', ['TimeService', '$interval', function (TimeService, $interval) {
    return {
        restrict: 'A',
        scope: { date: '@' },
        link: function (scope, element) {
            var future;
            future = new Date(scope.date);
            $interval(function () {
                var diff;
                diff = Math.floor((future.getTime() - new Date().getTime()) / 1000);
                return element.text(TimeService.dhms(diff));
            }, 1000);
        }
    };
}]);
app.directive('favorite', ['FavoriteService','UserService','$ionicPopup','$state', function (FavoriteService, UserService, $ionicPopup,$state) {
    return {
        restrict: 'AE',
        replace: true,
        template: '<button data-ng-click="change(data.status)" class="button button-clear favorite"><img ng-src="img/favorite/{{data.status}}.png"> </button>',
        scope: {
            'artist': '='
        },
        link: function($scope, elem, attrs) {

            $scope.data = {'artist':$scope.artist};
            console.info('in', $scope.data.artist);

            if(UserService.isLogged())
            {
                if(typeof $scope.data.artist != "undefined")
                {
                    FavoriteService.getArtistById($scope.data.artist.id).then(function(response){
                        if(typeof response.artist_id === "undefined")
                            $scope.data.status = 'off';
                        else
                            $scope.data.status = 'on';
                    });
                }
            }else{
                $scope.data.status = 'off';
            }



            function remove(artistId){
                FavoriteService.remove(artistId);
                $scope.data.status = 'off';
                $scope.$emit('favorite:change', true);
            }

            function add(artistId){
                FavoriteService.add(artistId);
                $scope.data.status = 'on';
                $scope.$emit('favorite:change', true);
            }

            $scope.change = function(status){
                if(UserService.isLogged())
                {
                    if(status == 'on')
                        remove($scope.data.artist.id);
                    else
                        add($scope.data.artist.id);
                }
                else{
                    var confirmPopup = $ionicPopup.confirm({
                        title: 'Iniciar sesión',
                        template: 'Para agregar favoritos debes estar logeado'
                    });

                    confirmPopup.then(function(response) {
                        if(response)
                            $state.go("base.login");
                    });
                }



            }




        }
    };
}]);
app.directive('lazyLoad', ['$window', '$q', function ($window, $q) {
    function load_script() {
        var s = document.createElement('script'); // use global document since Angular's $document is weak
        s.src = '/www.ticketea.com/entradas-festival-les-arts-2016/buy?width=600px&height=600px';
        document.body.appendChild(s);
    }
    function lazyLoadApi(key) {
        var deferred = $q.defer();
        $window.initialize = function () {
            deferred.resolve();
        };
        // thanks to Emil Stenström: http://friendlybit.com/js/lazy-loading-asyncronous-javascript/
        if ($window.attachEvent) {
            $window.attachEvent('onload', load_script);
        } else {
            $window.addEventListener('load', load_script, false);
        }
        return deferred.promise;
    }
    return {
        restrict: 'E',
        link: function (scope, element, attrs) { // function content is optional
            // in this example, it shows how and when the promises are resolved
            if ($window.google && $window.google.maps) {
                console.log('gmaps already loaded');
            } else {
                lazyLoadApi().then(function () {
                    console.log('promise resolved');
                    if ($window.google && $window.google.maps) {
                        console.log('gmaps loaded');
                    } else {
                        console.log('gmaps not loaded');
                    }
                }, function () {
                    console.log('promise rejected');
                });
            }
        }
    };
}]);
app.filter('cleanName', function () {
    return function (text) {
        if(typeof text === "undefined")
            return text;
        else
            return text.replace("!", "");
    };
})
app.filter('parseDate', function ($filter) {
    return function(text, type){
        if(typeof text === "undefined")
            return text;
        else{
            var  date = new Date(text.replace(/-/g,"/"));
            return $filter('date')(date, type);
        }
    }
});
'use strict';
app.factory('ArtistService', function ($rootScope, $resource, GLOBAL, DBService) {

    var resource = $resource(GLOBAL.api.url + GLOBAL.api.version + '/artists', {}, {
        'getAll': {
            method: 'GET',
            isArray: false,
            url: GLOBAL.api.url + GLOBAL.api.version + '/artists/' + GLOBAL.api.feast
        }
    });

    function add(artist) {

        var sql = "INSERT OR IGNORE INTO artists (id, name, description, image_profile, image_cover, stage_id, " +
            " stage_name, schedule, spotify_id, facebook, twitter, instagram) VALUES(?,?,?,?,?,?,?,?,?,?,?,?)";

        if(artist.name.toUpperCase().charCodeAt(0) > 90 )
            artist.name = '!'+artist.name;


        var params = [artist.id, artist.name, artist.description, artist.image_profile, artist.image_cover, artist.stage_id, artist.stage_name, artist.schedule.date, artist.spotify_id, artist.facebook, artist.twitter, artist.instagram];


        return DBService.query(sql, params)
            .then(function (response) {
                return response;
            }).catch(function(error){console.log(error)});

    }

    function drop() {
        return DBService.query('DROP TABLE IF EXISTS artists')
            .then(function (result) {
                return DBService.fetch(result);
            });
    }

    function getAll() {
        return DBService.query('SELECT * FROM artists')
            .then(function (result) {
                return DBService.fetchAll(result);
            });
    }

    function getFavorites(ids) {

        var args = "";
        for (i = 1; i <= ids.length; i++) {
            args+="?";
            if(i < ids.length)
                args+=",";
        }

        console.info('ids', ids);

        var sql = "SELECT * FROM artists WHERE id IN ("+args+")";

        return DBService.query(sql, ids)
            .then(function (result) {
                console.log('result all', result);
                return DBService.fetchAll(result);
            }).catch(function(error){console.log(error)});
    }

    function getById(id) {
        return DBService.query('SELECT * FROM artists WHERE id = ?', [id])
            .then(function (result) {
                return DBService.fetch(result);
            });
    }

    return {
        resource: resource,
        add: add,
        drop: drop,
        getAll: getAll,
        getById: getById,
        getFavorites:getFavorites
    };
});
'use strict';
app.factory('CoolwayService', function ($rootScope, $resource, GLOBAL, DBService) {

    var resource = $resource(GLOBAL.api.url + GLOBAL.api.version + '/coolways', {}, {
        'getAll': {
            method: 'GET',
            isArray: false,
            url: GLOBAL.api.url + GLOBAL.api.version + '/coolways/' + GLOBAL.api.feast
        }
    });

    return {
        resource: resource
    };
});
'use strict';
app.factory('DBService', function ($q, DB_CONFIG) {
    var self = this;
    self.db = null;

    self.init = function(drop) {
        self.db = window.sqlitePlugin.openDatabase({name: "DB", location: 1});
        //self.db = window.openDatabase(DB_CONFIG.name, '1.0', 'database', -1);

        //self.query('DROP TABLE IF EXISTS artists');
        angular.forEach(DB_CONFIG.tables, function(table) {
            var columns = [];
            if(drop && table.erasable)
                self.query('DROP TABLE IF EXISTS '+table.name);

            angular.forEach(table.columns, function(column) {
                columns.push(column.name + ' ' + column.type);
            });

           // var query = 'CREATE TABLE IF NOT EXISTS ' + table.name + ' (' + columns.join(',') + ')';
            var query = 'CREATE TABLE ' + table.name + ' (' + columns.join(',') + ')';
            self.query(query);
            //console.log('Table ' + table.name + ' initialized');
        });


    };

    self.query = function(query, bindings) {
        bindings = typeof bindings !== 'undefined' ? bindings : [];
        var deferred = $q.defer();

        self.db.transaction(function(transaction) {
            transaction.executeSql(query, bindings, function(transaction, result) {
                deferred.resolve(result);
            }, function(transaction, error) {
                //console.info('error db', error);
                deferred.reject(error);
            });
        });

        return deferred.promise;
    };

    self.fetchAll = function(result) {
        var output = [];

        for (var i = 0; i < result.rows.length; i++) {
            output.push(result.rows.item(i));
        }

        return output;
    };

    self.fetch = function(result) {
        return result.rows.item(0);
    };

    return self;
});
'use strict';
app.factory('DeviceService', function ($rootScope, $resource, GLOBAL, $http, $q, $ionicLoading) {

    var resource = $resource(GLOBAL.api.url + GLOBAL.api.version + '/devices', {}, {
        'register': {
            method: 'POST',
            isArray: false,
            url: GLOBAL.api.url + GLOBAL.api.version + '/devices/' + GLOBAL.api.feast
        },
        'unRegister': {
            method: 'DELETE',
            isArray: false,
            url: GLOBAL.api.url + GLOBAL.api.version + '/devices/' + GLOBAL.api.feast
        }
    });


    return {
        resource: resource
    };
});
'use strict';
app.factory('FacebookService', function ($rootScope, GLOBAL, $http, $q, $localStorage) {
    function fetchFeed() {
        var deferred = $q.defer();

        $http.get('https://graph.facebook.com/'+ GLOBAL.facebook.user_id + '/feed?fields=likes,comments,link,from,message,created_time,picture&' + $localStorage.fbAccessToken)
            .success(function (response) {
                deferred.resolve(response);
            }).error(function () {
        });

        return deferred.promise;
    }

    function getAccessToken() {
        var deferred = $q.defer();

        $http.get('https://graph.facebook.com/oauth/access_token?client_id=' + GLOBAL.facebook.client_id + '&client_secret=' + GLOBAL.facebook.client_secret + '&grant_type=client_credentials')
            .success(function (response) {
                deferred.resolve(response);
            }).error(function () {
        });

        return deferred.promise;
    }

    function getProfilePicture() {
        var deferred = $q.defer();
        $http.get('https://graph.facebook.com/' + GLOBAL.facebook.user_id + '?' + $localStorage.fbAccessToken + '&fields=picture&format=json')
            .success(function (response) {
                deferred.resolve(response.picture.data.url);
            }).error(function () {
        });
        return deferred.promise;
    }

    return {
        fetchFeed:fetchFeed,
        getAccessToken:getAccessToken,
        getProfilePicture:getProfilePicture
    };

});
'use strict';
app.factory('FavoriteService', function ($rootScope, $resource, GLOBAL, DBService, UserService) {

    var resource = $resource(GLOBAL.api.url + GLOBAL.api.version + '/favorites', {}, {
        'getAll': {
            method: 'GET',
            isArray: false,
            url: GLOBAL.api.url + GLOBAL.api.version + '/favorites/' + UserService.getUserId()
        },
        'create': {
            method: 'POST',
            isArray: false,
            url: GLOBAL.api.url + GLOBAL.api.version + '/favorites/' + UserService.getUserId()
        },
        'delete': {
            method: 'DELETE',
            isArray: false,
            url: GLOBAL.api.url + GLOBAL.api.version + '/favorites/' + UserService.getUserId()
        }
    });

    function add(artistId) {
        var sql = "INSERT OR IGNORE INTO favorites (artist_id, user_id) VALUES(?,?)";
        var params = [artistId, UserService.getUser().id ];

        return DBService.query(sql, params)
            .then(function (response) {
                return response;
            }).catch(function(error){console.log(error)});

    }

    function remove(artistId) {
        var sql = "DELETE FROM favorites WHERE artist_id = ? AND user_id = ?";
        var params = [artistId, UserService.getUser().id ];

        return DBService.query(sql, params)
            .then(function (response) {
                return response;
            }).catch(function(error){console.log(error)});

    }

    function drop() {
        return DBService.query('DROP TABLE IF EXISTS favorites')
            .then(function (result) {
                return DBService.fetch(result);
            });
    }

    function getAll() {
        return DBService.query('SELECT * FROM favorites WHERE user_id ='+UserService.getUser().id)
            .then(function (result) {
                return DBService.fetchAll(result);
            });
    }

    function getArtistById(id) {
        return DBService.query('SELECT * FROM favorites WHERE artist_id = ? AND user_id = ?', [id, UserService.getUser().id])
            .then(function (result) {
                if (result.rows.length > 0)
                    return DBService.fetch(result);
                else
                    return false;
            }).catch(function(error){console.log(error)});
    }


    return {
        resource: resource,
        add: add,
        remove:remove,
        drop: drop,
        getAll: getAll,
        getArtistById:getArtistById
    };
});
'use strict';
app.factory('InstagramService', function ($rootScope,$q,  $http, GLOBAL) {
    var service = {};

    //function fetchImages(callback) {
    //    var endPoint = 'https://api.instagram.com/v1/users/' + GLOBAL.instagram.user_id + '/media/recent/?client_id=' + GLOBAL.instagram.client_id + '&callback=JSON_CALLBACK';
    //    $http.jsonp(endPoint).success(function (response) {
    //        callback(response.data);
    //    });
    //};

    var endPoint = 'https://api.instagram.com/v1/users/' + GLOBAL.instagram.user_id + '/media/recent/?client_id=' + GLOBAL.instagram.client_id + '&callback=JSON_CALLBACK';
    var items = [];
    var nextUrl = 0;  // next max tag id - for fetching older photos
    var NewInsta = 0; // min tag id - for fetching newer photos

    return {
        GetFeed: function() {
            return $http.jsonp(endPoint).then(function(response) {
                console.info('instagram', response.data.data);
                items = response.data.data;
                nextUrl = response.data.pagination.next_url;
                NewInsta = response.data.pagination.next_max_id;
                return items;

            });
        },
        GetNewPhotos: function() {
            return $http.jsonp(endPoint + '&min_tag_id=' + NewInsta).then(function(response) {

                items = response.data.data;
                if(response.data.data.length > 0){
                    NewInsta = response.data.pagination.next_max_id;
                }

                return items;

            });
        },

        /**
         * Always returns a promise object. If there is a nextUrl,
         * the promise object will resolve with new instragram results,
         * otherwise it will always be resolved with [].
         **/
        GetOldPhotos: function() {
            if (typeof nextUrl != "undefined") {
                return $http.jsonp(endPoint + '&max_tag_id=' + nextUrl).then(function(response) {

                    if(response.data.data.length > 0){
                        nextUrl = response.data.pagination.next_url;
                    }

                    items = response.data.data;


                    return items;

                });
            } else {
                var deferred = $q.defer();
                deferred.resolve([]);
                return deferred.promise;
            }
        }

    };

});
'use strict';
app.factory('MapService', function ($rootScope, $resource, GLOBAL, DBService) {

    var resource = $resource(GLOBAL.api.url + GLOBAL.api.version + '/maps', {}, {
        'getAll': {
            method: 'GET',
            isArray: false,
            url: GLOBAL.api.url + GLOBAL.api.version + '/maps/' + GLOBAL.api.feast
        }
    });

    function add(map) {

        var sql = "INSERT OR IGNORE INTO maps (name, image, latitude, longitude) VALUES(?,?,?,?)";
        var params = [map.name, map.image, map.latitude, map.longitude];

        return DBService.query(sql, params)
            .then(function (response) {
                return response;
            }).catch(function(error){console.log(error)});
    }


    function addLocation(location) {

        var sql = "INSERT OR IGNORE INTO locations (name, image, detail, latitude, longitude) VALUES(?,?,?,?,?)";
        var params = [location.name, location.detail, location.image, location.latitude, location.longitude];

        return DBService.query(sql, params)
            .then(function (response) {
                return response;
            }).catch(function(error){console.log(error)});
    }

    function drop() {
        return DBService.query('DROP TABLE IF EXISTS maps')
            .then(function (result) {
                return DBService.fetch(result);
            });
    }

    function getAll() {
        return DBService.query('SELECT * FROM maps')
            .then(function (result) {
                return DBService.fetchAll(result);
            });
    }

    function getAllLocations(id) {
        return DBService.query('SELECT * FROM locations')
            .then(function (result) {
                return DBService.fetchAll(result);
            });
    }

    return {
        resource: resource,
        add: add,
        addLocation: addLocation,
        drop: drop,
        getAll: getAll,
        getAllLocations: getAllLocations
    };
});
'use strict';
app.factory('MusicService', function ($rootScope) {

    var tracks = [];
    var id = 0;
    var currentId = 0;

    function add(track, toPlaylist){
        var audio = new Audio();
        audio.id = id;
        audio.src = track.url;
        audio.title = track.name;
        audio.artist = track.artist;
        audio.addEventListener('play', function(){ console.info('music:play',track); $rootScope.$broadcast('music:play', track); });
        audio.addEventListener('pause', function(){ console.info('music:pause',track); $rootScope.$broadcast('music:pause', track); });
        if(toPlaylist)
        {
            audio.addEventListener('ended', function(){ console.info('music:next',track); next() });
            setCurrentId(0);
        }
        else
        {
            audio.addEventListener('ended', function(){ console.info('music:ended',track); $rootScope.$broadcast('music:ended', track); });
            setCurrentId(id);
        }
        tracks.push(audio);

        nextId();
    }

    function play(id){
        if(id >= 0)
        {
            pause();
            tracks[id].play();
            setCurrentId(id);
        }
        else{
            if(tracks.length > 0)
                tracks[currentId].play();
        }

    }

    function pause(){
        if(tracks.length > 0)
            tracks[currentId].pause();
    }

    function clear(){
        pause();
        tracks = [];
        id = 0;
    }

    function next(){
        var last = getLastId() - 1;
        if(getCurrentId() < last)
            setCurrentId(getCurrentId()+1);
        else
            setCurrentId(0);
        play();
    }


    function nextId(){
        id = id + 1 ;
    }

    function getLastId(){
        return id;
    }

    function getCurrentId()
    {
        return currentId;
    }

    function setCurrentId(id)
    {
        currentId = id;
    }

    return {
        add: add,
        clear:clear,
        play: play,
        pause: pause,
        getLastId: getLastId
    };
});
'use strict';
app.factory('NotificationService', function ($rootScope, $resource, GLOBAL, $http, $q, $ionicLoading) {

    var resource = $resource(GLOBAL.api.url + GLOBAL.api.version + '/notifications', {}, {
        'getAll': {
            method: 'GET',
            isArray: false,
            url: GLOBAL.api.url + GLOBAL.api.version + '/notifications/' + GLOBAL.api.feast
        }
    });


    return {
        resource: resource
    };
});
'use strict';
app.factory('PosterService', function ($rootScope, $resource, GLOBAL, DBService) {

    var resource = $resource(GLOBAL.api.url + GLOBAL.api.version + '/posters', {}, {
        'getAll': {
            method: 'GET',
            isArray: false,
            url: GLOBAL.api.url + GLOBAL.api.version + '/posters/' + GLOBAL.api.feast
        }
    });

    function add(poster) {

        var sql = "INSERT OR IGNORE INTO posters (id, image) VALUES(?,?)";
        var params = [poster.id, poster.name];

        return DBService.query(sql, params)
            .then(function (response) {
                return response;
            }).catch(function(error){console.log(error)});
    }


    function drop() {
        return DBService.query('DROP TABLE IF EXISTS posters')
            .then(function (result) {
                return DBService.fetch(result);
            });
    }

    function get() {
        return DBService.query('SELECT * FROM posters ORDER BY id DESC LIMIT 1')
            .then(function (result) {
                return DBService.fetchAll(result);
            });
    }

    return {
        resource: resource,
        add: add,
        drop: drop,
        get: get
    };
});
'use strict';
app.factory('ScheduleService', function ($rootScope, $resource, GLOBAL, DBService) {

    var resource = $resource(GLOBAL.api.url + GLOBAL.api.version + '/schedules', {}, {
        'getAll': {
            method: 'GET',
            isArray: false,
            url: GLOBAL.api.url + GLOBAL.api.version + '/schedules/' + GLOBAL.api.feast
        }
    });

    return {
        resource: resource
    };
});
'use strict';
app.factory('SpotifyService', function ($rootScope, Spotify, GLOBAL, $q) {

    function getTopTracks(spotifyId){
        return Spotify.getArtistTopTracks(spotifyId, GLOBAL.spotify.country_iso).then(function (data) {
            return data.tracks;
        });
    }

    function gerPlayList(){
        return Spotify.getPlaylist(GLOBAL.spotify.user_id, GLOBAL.spotify.playlist_id).then(function(data){
            return data;
        });
    }


    function openSpotify(link) {
        window.open(link, '_blank', 'location=yes');
    }



    //service.onUpdateState = function (state, index) {
    //    if (state === 'play') {
    //        // pause other players
    //        for (var i=0, l=this.players.length; i<l; i++) {
    //            if (i !== index) {
    //                this.players[i].pause();
    //            }
    //        }
    //    }
    //};


    return {
        getTopTracks: getTopTracks,
        gerPlayList: gerPlayList
    };
});
'use strict';
app.factory('TimeService', function ($rootScope, GLOBAL, $http, $q, $localStorage) {
    return {
        dhms: function (t) {
            var days, hours, minutes, seconds;
            days = Math.floor(t / 86400);
            t -= days * 86400;
            hours = Math.floor(t / 3600) % 24;
            t -= hours * 3600;
            minutes = Math.floor(t / 60) % 60;
            t -= minutes * 60;
            seconds = t % 60;
            var hoursTotal = hours + (days * 24);
            return [
                hoursTotal + ' horas',
                minutes + ' minutos'
            ].join(' ');
        }
    };
});
'use strict';
app.factory('TwitterService', function ($cordovaOauth, $cordovaOauthUtility, $http, $resource, $q, $localStorage, $twitterApi) {
    //var twitterKey = "STORAGE.TWITTER.KEY";
    var clientId = 'EUWrUcoeBsyc3WXcCeL7y3Cvl';
    var clientSecret = '1Dx2MY7zbypUPVK7anjIaTEb3fKxuwbeyC7mEV7MFvEULvJhz5';

    function storeUserToken(data) {
        $localStorage.twAccessToken = JSON.stringify(data);
    }

    function getStoredToken() {
        return $localStorage.twAccessToken;
    }

    function getTimeLine(){
        var params = {};
        params.screen_name = 'lesartsfest';
        return $twitterApi.getUserTimeline(params).then(function(data) {
            return data;
        }, function(error) {
            return error
        });
    }


    return {
        initialize: function() {
            var deferred = $q.defer();
            var token = getStoredToken();
            if (typeof token == "undefined") {
                $cordovaOauth.twitter(clientId, clientSecret).then(function (response) {
                    storeUserToken(response);
                    deferred.resolve(true);
                    $twitterApi.configure(clientId, clientSecret, response);
                }, function(error) {
                    console.info('error', error);
                    deferred.reject(false);
                });
            } else {
                $twitterApi.configure(clientId, clientSecret, token);
                deferred.resolve(true);
            }

            return deferred.promise;
        },
        isAuthenticated: function() {
            return typeof getStoredToken() != "undefined";
        },
        getTimeLine: getTimeLine
    };

});
'use strict';
app.factory('UserService', function ($rootScope, $resource, GLOBAL, $localStorage, $ionicPopup, DeviceService, $q) {

    var resource = $resource(GLOBAL.api.url + GLOBAL.api.version + '/users', {}, {
        'register': {
            method: 'POST',
            isArray: false,
            url: GLOBAL.api.url + GLOBAL.api.version + '/users/'
        },
        'login': {
            method: 'POST',
            isArray: false,
            url: GLOBAL.api.url + GLOBAL.api.version + '/authentications/'
        },
        'updatePassword': {
            method: 'PUT',
            isArray: false,
            url: GLOBAL.api.url + GLOBAL.api.version + '/user/'
        },
        'recoverPassword': {
            method: 'PUT',
            isArray: false,
            url: GLOBAL.api.url + GLOBAL.api.version + '/authentication/'
        }
    });

    function isLogged(){

        if(typeof $localStorage.user === "undefined")
            return false;
        else
            return (typeof $localStorage.user.access_token === "undefined") ? false : true;
    }

    function getUser(){
        return $localStorage.user;
    }

    function getUserId(){
        return isLogged() ? getUser().id : 0;
    }

    function setUser(user){
        $localStorage.user = user;
        registerNotifications();
    }

    function logout(){
        $localStorage.user = {};
        unRegisterDevice();
    }

    function validateEmail(email) {
        var pattern = /^([a-z\d!#$%&'*+\-\/=?^_`{|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+(\.[a-z\d!#$%&'*+\-\/=?^_`{|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+)*|"((([ \t]*\r\n)?[ \t]+)?([\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|\\[\x01-\x09\x0b\x0c\x0d-\x7f\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))*(([ \t]*\r\n)?[ \t]+)?")@(([a-z\d\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|[a-z\d\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF][a-z\d\-._~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]*[a-z\d\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])\.)+([a-z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|[a-z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF][a-z\d\-._~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]*[a-z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])\.?$/i;
        return pattern.test(email);
    }

    function unRegisterDevice() {
        var deferred = $q.defer();

        $scope.device = new DeviceService.resource();
        $scope.device.$register(function (response){
            deferred.resolve(response);
        }, function (error) {
            deferred.resolve(error);
        });
        return deferred.promise;
    }


    function registerDevice(data) {
        console.info('register device');
        var deferred = $q.defer();
        $scope.device = new DeviceService.resource();
        $scope.access_token = data.access_token;
        $scope.device_token = data.device_token;
        $scope.device.os = data.os;

        $scope.device.$register(function (response){
            deferred.resolve(response);
        }, function (error) {
            deferred.resolve(error);
        });

        return deferred.promise;
    }


    function registerNotifications() {
        if (window.PushNotification) {
            var PushNotification = window.PushNotification;

            console.info('push notification',PushNotification);

            var push = PushNotification.init({
                android: {
                    senderID: "les-arts",
                    icon: "festival",
                    iconColor: "lightgrey"
                },
                ios: {
                    alert: "true",
                    badge: "true",
                    sound: "true"
                },
                windows: {}
            });

            console.info('getUser()', getUser());
            if (getUser().device_token === null || getUser().device_token === undefined && (push !== null) ) {
                console.info('entro en device');
                push.on('registration', function (data) {
                    console.info('data registration', data);
                    // android by default
                    var os = '0';
                    if (ionic.Platform.isIOS())
                        os = '1';

                    $localStorage.device_token = data.registrationId;
                    registerDevice({
                        access_token: getUser().access_token,
                        os: os,
                        device_token: data.registrationId
                    });
                });
            }

            push.on('notification', function (data) {
                $ionicPopup.alert({
                    title: data.title,
                    template: data.message
                });
            });

            push.on('error', function (e) {
                // e.message
                console.log('notification error', e);
            });
        }
    }

    return {
        resource: resource,
        isLogged: isLogged,
        validateEmail: validateEmail,
        getUser: getUser,
        getUserId:getUserId,
        setUser: setUser,
        logout: logout,
        registerNotifications:registerNotifications,
        registerDevice:registerDevice,
        unRegisterDevice:unRegisterDevice
    };
});
'use strict';
app.factory('VersionService', function ($rootScope, $resource, GLOBAL, DBService) {

    var resource = $resource(GLOBAL.api.url + GLOBAL.api.version + '/versions', {}, {
        'get': {
            method: 'GET',
            isArray: false,
            url: GLOBAL.api.url + GLOBAL.api.version + '/versions/' + GLOBAL.api.feast
        }
    });

    return{
        resource:resource
    }
});
'use strict';
app.factory('WeatherService', function ($rootScope, $resource, GLOBAL, DBService) {

    var resource = $resource(GLOBAL.api.url + GLOBAL.api.version + '/weathers', {}, {
        'getAll': {
            method: 'GET',
            isArray: false,
            url: GLOBAL.api.url + GLOBAL.api.version + '/weathers/' + GLOBAL.api.feast
        }
    });

    return{
        resource:resource
    }
});